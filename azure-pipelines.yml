# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
  - master
  - develop
  - issue-*
  - develop-ciaran*

pr:
  - master
  - develop

variables:
  SOURCE_DIR: '$(System.DefaultWorkingDirectory)' # eg /home/vsts/work/1/s
  BUILD_DIR: '$(SOURCE_DIR)/build'
  INSTALL_DIR: '$(SOURCE_DIR)/install-azure'
  LLVM_INSTALL_PREFIX: '$(SOURCE_DIR)/llvm' # e.g./home/vsts/work/1
  DEPS_INSTALL_PREFIX: '$(SOURCE_DIR)/libroadrunner-deps' # e.g./home/vsts/work/1
  SWIG_SOURCE_DIR: '$(SOURCE_DIR)/swig'
  SWIG_INSTALL_PREFIX: '$(SWIG_SOURCE_DIR)/install-azure'
  SWIG_EXECUTABLE: '$(SWIG_INSTALL_PREFIX)/bin/swig'

stages:
  - stage: LinuxBuildRoadrunnerCpp
    jobs:
      - job: LinuxBuildRoadrunnerCpp
        timeoutInMinutes: "0"
        displayName: LinuxBuildRoadrunnerCpp
        continueOnError: "false"
        pool:
          vmImage: 'Ubuntu-18.04'
        strategy:
          matrix:
            64-bit Linux Release:
              BuildType: Release
            64-bit Linux Debug:
              BuildType: Debug
        steps:
          # we cannot upload prebuilt binaries onto github for linux debug version because of github file size limits.
          # therefore we do this build with Release llvm for both debug and release. Oddly enough it seems to work.
          - script: |
              echo "SOURCE_DIR $(SOURCE_DIR)"
              echo "BUILD_DIR $(BUILD_DIR)"
              echo "INSTALL_DIR $(INSTALL_DIR)"
              echo "LLVM_INSTALL_PREFIX $(LLVM_INSTALL_PREFIX)"
              echo "DEPS_INSTALL_PREFIX $(DEPS_INSTALL_PREFIX)"
              echo "Build.DefinitionName $(Build.DefinitionName)"
              echo "System.DefinitionId	 $(System.DefinitionId)"
              echo "Agent.OS $(Agent.OS)"

              echo "System.AccessToken  $(System.AccessToken)"
              echo "System.CollectionId $(System.CollectionId)"
              echo "System.CollectionUri  $(System.CollectionUri)"
              echo "System.DefaultWorkingDirectory  $(System.DefaultWorkingDirectory)"
              echo "System.DefinitionId $(System.DefinitionId)"
              echo "System.HostType $(System.HostType)"
              echo "System.JobAttempt $(System.JobAttempt)"
              echo "System.JobDisplayName $(System.JobDisplayName)"
              echo "System.JobId  $(System.JobId)"
              echo "System.JobName  $(System.JobName)"
              echo "System.PhaseAttempt $(System.PhaseAttempt)"
              echo "System.PhaseDisplayName $(System.PhaseDisplayName)"
              echo "System.PhaseName  $(System.PhaseName)"
              echo "System.StageAttempt $(System.StageAttempt)"
              echo "System.StageDisplayName $(System.StageDisplayName)"
              echo "System.StageName  $(System.StageName)"
              echo "System.PullRequest.IsFork $(System.PullRequest.IsFork)"
              echo "System.PullRequest.PullRequestId $(System.PullRequest.PullRequestId)"
              echo "System.PullRequest.PullRequestNumber $(System.PullRequest.PullRequestNumber)"
              echo "System.PullRequest.SourceBranch $(System.PullRequest.SourceBranch)"
              echo "System.PullRequest.SourceRepositoryURI $(System.PullRequest.SourceRepositoryURI)"
              echo "System.PullRequest.TargetBranch $(System.PullRequest.TargetBranch)"
              echo "System.TeamFoundationCollectionUri $(System.TeamFoundationCollectionUri)"
              echo "System.TeamProject $(System.TeamProject)"
              echo "System.TeamProjectId $(System.TeamProjectId)"
              echo "TF_BUILD $(TF_BUILD)"
            displayName: Print Variables
          - script: |
              mkdir $(LLVM_INSTALL_PREFIX)
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - script: |
              # todo put into actual script
              echo "current driectory is: $(pwd)"
              echo "ls $(ls)"
              wget -q https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-gcc7.5-x64-release.tar.gz
              tar -zxf llvm-6.x-gcc7.5-x64-release.tar.gz
              mv llvm-6.x-gcc7.5-x64-release/** '$(LLVM_INSTALL_PREFIX)'
              echo "cd to LLVM_INSTALL_PREFIX: $(LLVM_INSTALL_PREFIX)"
              cd $(LLVM_INSTALL_PREFIX)
              echo "ls:"
              ls
            displayName: "Get LLVM"
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-$(BuildType)
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - script: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/$(BuildType)/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          - script: |
              echo "Configuring roadrunner"
              echo "mkdir build directory: $(BUILD_DIR)"
              mkdir $(BUILD_DIR)
              echo "CD to build dir: $(BUILD_DIR)"
              cd $(BUILD_DIR)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=$(BuildType) ..
            displayName: Run CMake Configure Command
          - script: |
              echo "Building roadrunner"
              echo "cd to build dir"
              cd $(BUILD_DIR)
              cmake --build . --target install --config $(BuildType) -j 12
            displayName: Run CMake Build Command
          - task: CopyFiles@2
            inputs:
              contents: '$(SOURCE_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)
            displayName: Copy to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: roadrunner-$(Agent.OS)-$(BuildType)
            displayName: Publish

  - stage: TestRoadrunnerC
    dependsOn: LinuxBuildRoadrunnerCpp
    jobs:
      - job: RunTestsC
        timeoutInMinutes: "0"
        displayName: Run C/C++ tests
        continueOnError: "false"
        pool:
          vmImage: "ubuntu-18.04"
        strategy:
          matrix:
            64-bit Linux Release:
              BuildType: Release
            64-bit Linux Debug:
              BuildType: Debug

        steps:
          - checkout: 'none'
          - script: |
              mkdir -p $(SOURCE_DIR)
              mkdir -p $(BUILD_DIR)
              mkdir -p $(INSTALL_DIR)
            displayName: Make directories
          - task: DownloadPipelineArtifact@2
            inputs:
              source: current
              artifact: roadrunner-$(Agent.OS)-$(BuildType)
              # copy into parent of where you want it.
              path: '$(SOURCE_DIR)'
          - script: sudo apt install -y libtinfo5
            displayName: Install system deps (for ubuntu 20.04)
          - script: |
              echo "Ensure tests have execute permission"
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "Run chmod -R 755 ."
              chmod -R 755 .
              echo "ls"
              ls
            displayName: Permissions
          - script: |
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ctest --verbose --extra-verbose --progress
            displayName: RunCTest

  - stage: LinuxBuildRoadrunnerPython
    dependsOn: []
    jobs:
      - job: LinuxBuildRoadrunnerPython
        timeoutInMinutes: "0"
        displayName: LinuxBuildRoadrunnerPython
        continueOnError: "false"
        pool:
          vmImage: 'Ubuntu-18.04'
        strategy:
          matrix:
            py36:
              PythonVersion: 3.6
              PythonName: py36
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
        variables:
          MinicondaRoot : '/usr/share/miniconda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/lib'
          PythonExecutable: '$(PythonRoot)/python'
        steps:
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH
          - script: |
              echo "PythonVersion $(PythonVersion)"
              echo "PythonName $(PythonName)"
              echo "MinicondaRoot $(MinicondaRoot)"
              echo "PythonRoot $(PythonRoot)"
              echo "PythonLibDir $(PythonLibDir)"
            displayName: PrintPythonVariables
          - script: |
              mkdir $(LLVM_INSTALL_PREFIX)
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - script: |
              # todo put into actual script
              echo "current driectory is: $(pwd)"
              echo "ls $(ls)"
              wget -q https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-gcc7.5-x64-release.tar.gz
              tar -zxf llvm-6.x-gcc7.5-x64-release.tar.gz
              mv llvm-6.x-gcc7.5-x64-release/** '$(LLVM_INSTALL_PREFIX)'
              echo "cd to LLVM_INSTALL_PREFIX: $(LLVM_INSTALL_PREFIX)"
              cd $(LLVM_INSTALL_PREFIX)
              echo "ls:"
              ls
            displayName: "Get LLVM"
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-$(BuildType)
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - script: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/$(BuildType)/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          - script: |
              echo "installing pcre"
              sudo apt install -y libpcre3 libpcre3-dev
              mkdir -p $(SWIG_SOURCE_DIR)
              echo "cd to swig source dir: $(SWIG_SOURCE_DIR)"
              cd $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              wget -q https://sourceforge.net/projects/swig/files/swig/swig-3.0.0/swig-3.0.0.tar.gz $(SWIG_SOURCE_DIR)
              tar -xf swig-3.0.0.tar.gz
              ls -lh
              echo "Copying swig content from swig-3.0.0 to SWIG_SOURCE_DIR"
              mv swig-3.0.0/** $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls -lh
              ./configure --prefix=$(SWIG_INSTALL_PREFIX)
              make -j 12
              make install
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls
              echo "cd to swig install dir: $(SWIG_INSTALL_PREFIX)"
              cd $(SWIG_INSTALL_PREFIX)
              echo "ls from SWIG_INSTALL_PREFIX: $(SWIG_INSTALL_PREFIX)"
              ls
              if [ ! -f "$(SWIG_EXECUTABLE)" ]; then
                echo "did not locate swig executable, exiting"
                exit
              fi
            displayName: Install Swig
          - script: |
              mkdir -p $(SOURCE_DIR)
              mkdir -p $(BUILD_DIR)
              mkdir -p $(INSTALL_DIR)
            displayName: Make directories
          - script: |
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "ls"
              ls
              eval "$(conda shell.bash hook)"
              conda create -y --name $(PythonName) python=$(PythonVersion)
              conda activate $(PythonName)
              conda install --yes --quiet nose numpy
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              python_exe="$(which python)"
              python_dir="$(dirname $(which python))"
              echo "python_dir == $python_dir"
              echo "Variable PythonRoot set to $(PythonRoot)"
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ls
              export LD_LIBRARY_PATH=$(PythonLibDir)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DSWIG_EXECUTABLE=$(SWIG_EXECUTABLE) ..
              cmake --build . --target install --config Release -j 12
            displayName: BuildRoadrunnerWithPython
          - script: |
              eval "$(conda shell.bash hook)"
              conda activate $(PythonName)
              echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"
              export LD_LIBRARY_PATH=$(PythonLibDir)
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              $(PythonExecutable) site-packages/roadrunner/testing/__main__.py
            displayName: RunPythonTests
          - script: |
              # todo workout whether the top few lines are needed now I'm using $(PythonExecutable)
              eval "$(conda shell.bash hook)"
              conda activate $(PythonName)
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              python_exe="$(which python)"
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              $(PythonExecutable) setup.py bdist_wheel
              $(PythonExecutable) setup_rrplugins.py bdist_wheel
            displayName: Generate pip wheel
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/Install-$(PythonName)
            displayName: Copy to Staging Area
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/dist/*'
              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
            displayName: Copy to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: roadrunner-install-$(Agent.OS)-$(PythonName)
            displayName: Publish


  - stage: TestRoadrunnerPython
    dependsOn: LinuxBuildRoadrunnerCpp
    jobs:
      - job: RunTestsPython
        timeoutInMinutes: "0"
        displayName: Run Python Tests
        continueOnError: "false"
        pool:
          vmImage: "ubuntu-18.04"
        strategy:
          matrix:
            py36:
              PythonVersion: 3.6
              PythonName: py36
            py37:
              PythonVersion: 3.7
              PythonName: py37
            py38:
              PythonVersion: 3.8
              PythonName: py38
        variables:
          MinicondaRoot : '/usr/share/miniconda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/lib'
        steps:
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH
          - script: |
              echo "PythonVersion $(PythonVersion)"
              echo "PythonName $(PythonName)"
              echo "MinicondaRoot $(MinicondaRoot)"
              echo "PythonRoot $(PythonRoot)"
              echo "PythonLibDir $(PythonLibDir)"
            displayName: PrintVariables
          - script: |
              echo "installing pcre"
              sudo apt install -y libpcre3 libpcre3-dev
              mkdir -p $(SWIG_SOURCE_DIR)
              echo "cd to swig source dir: $(SWIG_SOURCE_DIR)"
              cd $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              wget -q https://sourceforge.net/projects/swig/files/swig/swig-3.0.0/swig-3.0.0.tar.gz $(SWIG_SOURCE_DIR)
              tar -xf swig-3.0.0.tar.gz
              ls -lh
              echo "Copying swig content from swig-3.0.0 to SWIG_SOURCE_DIR"
              mv swig-3.0.0/** $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls -lh
              ./configure --prefix=$(SWIG_INSTALL_PREFIX)
              make -j 12
              make install
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls
              echo "cd to swig install dir: $(SWIG_INSTALL_PREFIX)"
              cd $(SWIG_INSTALL_PREFIX)
              echo "ls from SWIG_INSTALL_PREFIX: $(SWIG_INSTALL_PREFIX)"
              ls
              if [ ! -f "$(SWIG_EXECUTABLE)" ]; then
                echo "didn not locate swig executable, exiting"
                exit
              fi
            displayName: Install Swig
          - script: |
              mkdir -p $(SOURCE_DIR)
              mkdir -p $(BUILD_DIR)
              mkdir -p $(INSTALL_DIR)
            displayName: Make directories
          - task: DownloadPipelineArtifact@2
            inputs:
              source: current
              artifact: roadrunner-$(Agent.OS)-Release
              # copy into parent of where you want it.
              path: '$(SOURCE_DIR)'
          - script: |
              echo "Ensure tests have execute permission"
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "Run chmod -R 755 ."
              chmod -R 755 .
              echo "ls"
              ls
            displayName: Permissions
          - script: |
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "ls"
              ls
              eval "$(conda shell.bash hook)"
              conda create -y --name $(PythonName) python=$(PythonVersion)
              conda activate $(PythonName)
              conda install --yes --quiet nose numpy
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              python_exe="$(which python)"
              python_dir="$(dirname $(which python))"
              echo "python_dir == $python_dir"
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ls
              export LD_LIBRARY_PATH=$(PythonLibDir)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$python_dir -DSWIG_EXECUTABLE=$(SWIG_EXECUTABLE) ..
              cmake --build . --target install --config Release -j 12
            displayName: BuildRoadrunnerWithTests
          - script: |
              eval "$(conda shell.bash hook)"
              conda activate $(PythonName)
              echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"
              export LD_LIBRARY_PATH=$(PythonLibDir)
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              python_exe="$(which python)"
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              python site-packages/roadrunner/testing/__main__.py
            displayName: RunPythonTests
          - script: |
              eval "$(conda shell.bash hook)"
              conda activate $(PythonName)
              echo "which python: $(which python)"
              echo "which conda: $(which conda)"
              python_exe="$(which python)"
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              python setup.py bdist_wheel
              python setup_rrplugins.py bdist_wheel
            displayName: Generate pip wheel
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/Install-$(PythonName)
            displayName: Copy to Staging Area
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/dist/*'
              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
            displayName: Copy to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: roadrunner-install-$(Agent.OS)-$(PythonName)
            displayName: Publish






            #              echo "current driectory is: "

















#              pwd
#              echo "doing ls"
#              ls -lh
#              wget https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/roadrunner-deps-gcc7.5-x64-release.tar.gz
#              tar -zxvf roadrunner-deps-gcc7.5-x64-release.tar.gz
#              ls
#            displayName: "Get Dependencies"
#          - task: CMake@1
#            displayName: ConfigureCommand
#            inputs:
#              cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../roadrunner-deps-gcc7.5-x64-release" -DLLVM_INSTALL_PREFIX="../llvm-6.x-gcc7.5-x64-release" -DCMAKE_BUILD_TYPE=$(BuildType) -DBUILD_TESTS=ON -DBUILD_TEST_TOOLS=ON -DBUILD_RR_PLUGINS=ON ..
#          - task: CMake@1
#            displayName: BuildCommand
#            inputs:
#              cmakeArgs: --build . --target install --config $(BuildType) -j 12
#          - script: |
#              echo "pwd: $(pwd)"
#              ls
#              echo "$(Agent.BuildDirectory)"
#              cd $(Agent.BuildDirectory)/s/build
#              echo "pwd: $(pwd)"
#              ls
#              ctest --verbose --extra-verbose --progress
#            displayName: RunTests
#
#      - job: BuildRoadrunnerWindowsRelease
#        timeoutInMinutes: "0"
#        displayName: Windows
#        continueOnError: "false"
#        pool:
#          vmImage: "windows-2019"
#
#        strategy:
#          matrix:
#            64-bit Windows Release:
#              BuildType: Release
#              SelfHost: false
#              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-azure-release"
#              llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-msvc2019-x64-release.zip
#              llvm_zip: llvm-6.x-msvc2019-x64-release.zip
#              llvm_install: llvm-6.x-msvc2019-x64-release
#              rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/roadrunner-deps-msvc2019-x64-release.zip
#              rr_deps_zip: roadrunner_deps-msvc2019-x64-release.zip
#              rr_deps_install: roadrunner-deps-msvc2019-x64-release
#
#        steps:
#          - powershell: |
#              $ProgressPreference = 'SilentlyContinue'
#              Invoke-WebRequest $(llvm_link) -OutFile $(llvm_zip)
#              Expand-Archive  $(llvm_zip) -Destination .
#              rm $(llvm_zip) # since we are limited to 10gb space per job we clean up zips
#              echo "pwd: $(pwd)"
#              dir
#              cd '$(llvm_install)'
#              dir
#            displayName: "Get LLVM"
#            errorActionPreference: 'stop'
#          - powershell: |
#              $ProgressPreference = 'SilentlyContinue'
#              Invoke-WebRequest $(rr_deps_link) -OutFile $(rr_deps_zip)
#              Expand-Archive $(rr_deps_zip)  -Destination .
#              rm $(rr_deps_zip)
#              echo "pwd: $(pwd)"
#              dir
#            errorActionPreference: 'stop'
#            displayName: "Get Dependencies"
#          - task: CMake@1
#            displayName: ConfigureCommand
#            inputs:
#              cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType) -DBUILD_TESTS=ON -DBUILD_TEST_TOOLS=ON -DBUILD_RR_PLUGINS=ON ..
#          - task: CMake@1
#            displayName: BuildCommand
#            inputs:
#              cmakeArgs: --build . --config $(BuildType) -j 12
#          - script: |
#              echo "pwd: $(pwd)"
#              ls
#              cd $(Agent.BuildDirectory)/s/build
#              echo "pwd: $(pwd)"
#              ls
#              ctest --verbose --extra-verbose --progress
#            displayName: RunTests
#
#
#      - job: BuildRoadrunnerMacRelease
#        timeoutInMinutes: "0"
#        displayName: MacOS
#        continueOnError: "false"
#        pool:
#          vmImage: 'macOS-10.15'
#
#        strategy:
#          matrix:
#            64-bit Mac Release:
#              BuildType: Release
#              SelfHost: false
#              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-azure-release"
#              llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-clang11.0.3-x64-release.zip
#              llvm_zip: llvm-6.x-clang11.0.3-x64-release.zip
#              llvm_install: llvm-6.x-clang11.0.3-x64-release
#              rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/libroadrunner-deps-mac-x64-release.zip
#              rr_deps_zip: libroadrunner-deps-mac-x64-release.zip
#              rr_deps_install: libroadrunner-deps-mac-x64-release
#
#        steps:
#          - script: |
#              echo "current driectory is: "
#              pwd
#              echo "doing ls"
#              ls -lh
#              wget $(llvm_link)
#              tar -zxvf $(llvm_zip)
#              ls
#            displayName: "Get LLVM"
#          - script: |
#              echo "current driectory is: "
#              pwd
#              echo "doing ls"
#              ls -lh
#              wget $(rr_deps_link)
#              tar -zxvf $(rr_deps_zip)
#              ls
#            displayName: "Get Dependencies"
#          - task: CMake@1
#            displayName: ConfigureCommand
#            inputs:
#              cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType) -DBUILD_TESTS=ON -DBUILD_TEST_TOOLS=ON -DBUILD_RR_PLUGINS=ON ..
#          - task: CMake@1
#            displayName: BuildCommand
#            inputs:
#              cmakeArgs: --build . --target install --config $(BuildType) -j 12
#          - script: |
#              echo "pwd: $(pwd)"
#              ls
#              cd $(Agent.BuildDirectory)/s/build
#              echo "pwd: $(pwd)"
#              ls
#              ctest --verbose --extra-verbose --progress
#            displayName: RunTests
#
#      - job: BuildRoadrunnerWindowsDebug
#        timeoutInMinutes: "0"
#        displayName: Windows
#        continueOnError: "false"
#        pool:
#          vmImage: "windows-2019"
#
#        strategy:
#          matrix:
#            64-bit Windows Debug:
#              BuildType: Debug
#              SelfHost: false
#              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-azure-debug"
#              llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-msvc2019-x64-debug.zip
#              llvm_zip: llvm-6.x-msvc2019-x64-debug.zip
#              llvm_install: llvm-6.x-msvc2019-x64-debug
#              rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/roadrunner-deps-msvc2019-x64-debug.zip
#              rr_deps_zip: roadrunner_deps-msvc2019-x64-debug.zip
#              rr_deps_install: roadrunner-deps-msvc2019-x64-debug
#
#        steps:
#          - powershell: |
#              $ProgressPreference = 'SilentlyContinue'
#              Invoke-WebRequest $(llvm_link) -OutFile $(llvm_zip)
#              Expand-Archive  $(llvm_zip) -Destination .
#              rm $(llvm_zip) # since we are limited to 10gb space per job we clean up zips
#              echo "pwd: $(pwd)"
#              dir
#              cd '$(llvm_install)'
#              dir
#            displayName: "Get LLVM"
#            errorActionPreference: 'stop'
#          - powershell: |
#              $ProgressPreference = 'SilentlyContinue'
#              Invoke-WebRequest $(rr_deps_link) -OutFile $(rr_deps_zip)
#              Expand-Archive $(rr_deps_zip)  -Destination .
#              rm $(rr_deps_zip)
#              echo "pwd: $(pwd)"
#              dir
#            errorActionPreference: 'stop'
#            displayName: "Get Dependencies"
#          - task: CMake@1
#            displayName: ConfigureCommand
#            inputs:
#              cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType) ..
#          - task: CMake@1
#            displayName: BuildCommand
#            inputs:
#              cmakeArgs: --build . --config $(BuildType) -j 12
#          ## Don't run testing on the debug version--it takes too long.
#
#      - job: BuildRoadrunnerMacDebug
#        timeoutInMinutes: "0"
#        displayName: MacOS
#        continueOnError: "false"
#        pool:
#          vmImage: 'macOS-10.15'
#
#        strategy:
#          matrix:
#            64-bit Mac Debug:
#              BuildType: Debug
#              SelfHost: false
#              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-azure-debug"
#              llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-clang11.0.3-x64-release.zip
#              llvm_zip: llvm-6.x-clang11.0.3-x64-release.zip
#              llvm_install: llvm-6.x-clang11.0.3-x64-release
#              rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/libroadrunner-deps-mac-x64-debug.zip
#              rr_deps_zip: libroadrunner-deps-mac-x64-debug.zip
#              rr_deps_install: libroadrunner-deps-mac-x64-debug
#
#        steps:
#          - script: |
#              echo "current driectory is: "
#              pwd
#              echo "doing ls"
#              ls -lh
#              wget $(llvm_link)
#              tar -zxvf $(llvm_zip)
#              ls
#            displayName: "Get LLVM"
#          - script: |
#              echo "current driectory is: "
#              pwd
#              echo "doing ls"
#              ls -lh
#              wget $(rr_deps_link)
#              tar -zxvf $(rr_deps_zip)
#              ls
#            displayName: "Get Dependencies"
#          - task: CMake@1
#            displayName: ConfigureCommand
#            inputs:
#              cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType) -DBUILD_TESTS=ON -DBUILD_TEST_TOOLS=ON -DBUILD_RR_PLUGINS=ON ..
#          - task: CMake@1
#            displayName: BuildCommand
#            inputs:
#              cmakeArgs: --build . --target install --config $(BuildType) -j 12
#          ## Don't run testing on the debug version--it takes too long.
