# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_telplugins')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_telplugins')
    _telplugins = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_telplugins', [dirname(__file__)])
        except ImportError:
            import _telplugins
            return _telplugins
        try:
            _mod = imp.load_module('_telplugins', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _telplugins = swig_import_helper()
    del swig_import_helper
else:
    import _telplugins
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

jtLoadModel = _telplugins.jtLoadModel
jtSimulate = _telplugins.jtSimulate
class RRInstanceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RRInstanceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RRInstanceList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Count"] = _telplugins.RRInstanceList_Count_set
    __swig_getmethods__["Count"] = _telplugins.RRInstanceList_Count_get
    if _newclass:
        Count = _swig_property(_telplugins.RRInstanceList_Count_get, _telplugins.RRInstanceList_Count_set)
    __swig_setmethods__["Handle"] = _telplugins.RRInstanceList_Handle_set
    __swig_getmethods__["Handle"] = _telplugins.RRInstanceList_Handle_get
    if _newclass:
        Handle = _swig_property(_telplugins.RRInstanceList_Handle_get, _telplugins.RRInstanceList_Handle_set)
    __swig_setmethods__["RRList"] = _telplugins.RRInstanceList_RRList_set
    __swig_getmethods__["RRList"] = _telplugins.RRInstanceList_RRList_get
    if _newclass:
        RRList = _swig_property(_telplugins.RRInstanceList_RRList_get, _telplugins.RRInstanceList_RRList_set)

    def __init__(self):
        this = _telplugins.new_RRInstanceList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _telplugins.delete_RRInstanceList
    __del__ = lambda self: None
RRInstanceList_swigregister = _telplugins.RRInstanceList_swigregister
RRInstanceList_swigregister(RRInstanceList)

class RRCCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RRCCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RRCCode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Header"] = _telplugins.RRCCode_Header_set
    __swig_getmethods__["Header"] = _telplugins.RRCCode_Header_get
    if _newclass:
        Header = _swig_property(_telplugins.RRCCode_Header_get, _telplugins.RRCCode_Header_set)
    __swig_setmethods__["Source"] = _telplugins.RRCCode_Source_set
    __swig_getmethods__["Source"] = _telplugins.RRCCode_Source_get
    if _newclass:
        Source = _swig_property(_telplugins.RRCCode_Source_get, _telplugins.RRCCode_Source_set)

    def __init__(self):
        this = _telplugins.new_RRCCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _telplugins.delete_RRCCode
    __del__ = lambda self: None
RRCCode_swigregister = _telplugins.RRCCode_swigregister
RRCCode_swigregister(RRCCode)


def tpCreatePluginManager(pluginDir):
    return _telplugins.tpCreatePluginManager(pluginDir)
tpCreatePluginManager = _telplugins.tpCreatePluginManager

def tpFreePluginManager(handle):
    return _telplugins.tpFreePluginManager(handle)
tpFreePluginManager = _telplugins.tpFreePluginManager

def tpLoadPlugins(handle):
    return _telplugins.tpLoadPlugins(handle)
tpLoadPlugins = _telplugins.tpLoadPlugins

def tpGetPluginLoadErrors(handle):
    return _telplugins.tpGetPluginLoadErrors(handle)
tpGetPluginLoadErrors = _telplugins.tpGetPluginLoadErrors

def tpUnLoadPlugins(handle):
    return _telplugins.tpUnLoadPlugins(handle)
tpUnLoadPlugins = _telplugins.tpUnLoadPlugins

def tpLoadPlugin(handle, pluginName):
    return _telplugins.tpLoadPlugin(handle, pluginName)
tpLoadPlugin = _telplugins.tpLoadPlugin

def tpUnLoadPlugin(handle, plugin):
    return _telplugins.tpUnLoadPlugin(handle, plugin)
tpUnLoadPlugin = _telplugins.tpUnLoadPlugin

def tpGetNumberOfPlugins(handle):
    return _telplugins.tpGetNumberOfPlugins(handle)
tpGetNumberOfPlugins = _telplugins.tpGetNumberOfPlugins

def tpGetPluginNames(handle):
    return _telplugins.tpGetPluginNames(handle)
tpGetPluginNames = _telplugins.tpGetPluginNames

def tpGetPluginLibraryNames(handle):
    return _telplugins.tpGetPluginLibraryNames(handle)
tpGetPluginLibraryNames = _telplugins.tpGetPluginLibraryNames

def tpGetFirstPlugin(handle):
    return _telplugins.tpGetFirstPlugin(handle)
tpGetFirstPlugin = _telplugins.tpGetFirstPlugin

def tpGetNextPlugin(handle):
    return _telplugins.tpGetNextPlugin(handle)
tpGetNextPlugin = _telplugins.tpGetNextPlugin

def tpGetPreviousPlugin(handle):
    return _telplugins.tpGetPreviousPlugin(handle)
tpGetPreviousPlugin = _telplugins.tpGetPreviousPlugin

def tpGetCurrentPlugin(handle):
    return _telplugins.tpGetCurrentPlugin(handle)
tpGetCurrentPlugin = _telplugins.tpGetCurrentPlugin

def tpGetPluginName(handle):
    return _telplugins.tpGetPluginName(handle)
tpGetPluginName = _telplugins.tpGetPluginName

def tpGetPluginCategory(handle):
    return _telplugins.tpGetPluginCategory(handle)
tpGetPluginCategory = _telplugins.tpGetPluginCategory

def tpGetPluginDescription(handle):
    return _telplugins.tpGetPluginDescription(handle)
tpGetPluginDescription = _telplugins.tpGetPluginDescription

def tpGetPluginHint(handle):
    return _telplugins.tpGetPluginHint(handle)
tpGetPluginHint = _telplugins.tpGetPluginHint

def tpGetPluginInfo(handle):
    return _telplugins.tpGetPluginInfo(handle)
tpGetPluginInfo = _telplugins.tpGetPluginInfo

def tpGetPluginAuthor(handle):
    return _telplugins.tpGetPluginAuthor(handle)
tpGetPluginAuthor = _telplugins.tpGetPluginAuthor

def tpGetPluginManualAsPDF(handle):
    return _telplugins.tpGetPluginManualAsPDF(handle)
tpGetPluginManualAsPDF = _telplugins.tpGetPluginManualAsPDF

def tpGetPluginManualNrOfBytes(handle):
    return _telplugins.tpGetPluginManualNrOfBytes(handle)
tpGetPluginManualNrOfBytes = _telplugins.tpGetPluginManualNrOfBytes

def tpAssignRoadRunnerInstance(pHandle, rrHandle):
    return _telplugins.tpAssignRoadRunnerInstance(pHandle, rrHandle)
tpAssignRoadRunnerInstance = _telplugins.tpAssignRoadRunnerInstance

def tpExecutePlugin(handle):
    return _telplugins.tpExecutePlugin(handle)
tpExecutePlugin = _telplugins.tpExecutePlugin

def tpExecutePluginEx(handle, inAThread):
    return _telplugins.tpExecutePluginEx(handle, inAThread)
tpExecutePluginEx = _telplugins.tpExecutePluginEx

def tpGetPluginStatus(handle):
    return _telplugins.tpGetPluginStatus(handle)
tpGetPluginStatus = _telplugins.tpGetPluginStatus

def tpGetPluginResult(handle):
    return _telplugins.tpGetPluginResult(handle)
tpGetPluginResult = _telplugins.tpGetPluginResult

def tpResetPlugin(handle):
    return _telplugins.tpResetPlugin(handle)
tpResetPlugin = _telplugins.tpResetPlugin

def tpIsPluginWorking(handle):
    return _telplugins.tpIsPluginWorking(handle)
tpIsPluginWorking = _telplugins.tpIsPluginWorking

def tpTerminateWork(handle):
    return _telplugins.tpTerminateWork(handle)
tpTerminateWork = _telplugins.tpTerminateWork

def tpIsBeingTerminated(handle):
    return _telplugins.tpIsBeingTerminated(handle)
tpIsBeingTerminated = _telplugins.tpIsBeingTerminated

def tpWasTerminated(handle):
    return _telplugins.tpWasTerminated(handle)
tpWasTerminated = _telplugins.tpWasTerminated

def tpAssignOnStartedEvent(handle, cb, userData1, userData2):
    return _telplugins.tpAssignOnStartedEvent(handle, cb, userData1, userData2)
tpAssignOnStartedEvent = _telplugins.tpAssignOnStartedEvent

def tpAssignOnProgressEvent(handle, cb, userData1, userData2):
    return _telplugins.tpAssignOnProgressEvent(handle, cb, userData1, userData2)
tpAssignOnProgressEvent = _telplugins.tpAssignOnProgressEvent

def tpAssignOnFinishedEvent(handle, cb, userData1, userData2):
    return _telplugins.tpAssignOnFinishedEvent(handle, cb, userData1, userData2)
tpAssignOnFinishedEvent = _telplugins.tpAssignOnFinishedEvent

def tpGetRoadRunnerHandleFromPlugin(handle):
    return _telplugins.tpGetRoadRunnerHandleFromPlugin(handle)
tpGetRoadRunnerHandleFromPlugin = _telplugins.tpGetRoadRunnerHandleFromPlugin

def tpGetPluginProperties(handle):
    return _telplugins.tpGetPluginProperties(handle)
tpGetPluginProperties = _telplugins.tpGetPluginProperties

def tpGetListOfPluginPropertyNames(handle):
    return _telplugins.tpGetListOfPluginPropertyNames(handle)
tpGetListOfPluginPropertyNames = _telplugins.tpGetListOfPluginPropertyNames

def tpGetPluginProperty(handle, propertyName):
    return _telplugins.tpGetPluginProperty(handle, propertyName)
tpGetPluginProperty = _telplugins.tpGetPluginProperty

def tpGetPluginPropertyValueHandle(handle, propertyName):
    return _telplugins.tpGetPluginPropertyValueHandle(handle, propertyName)
tpGetPluginPropertyValueHandle = _telplugins.tpGetPluginPropertyValueHandle

def tpGetPluginPropertyValueAsString(handle, propertyName):
    return _telplugins.tpGetPluginPropertyValueAsString(handle, propertyName)
tpGetPluginPropertyValueAsString = _telplugins.tpGetPluginPropertyValueAsString

def tpSetPluginProperty(handle, propertyName, value):
    return _telplugins.tpSetPluginProperty(handle, propertyName, value)
tpSetPluginProperty = _telplugins.tpSetPluginProperty

def tpGetLastError():
    return _telplugins.tpGetLastError()
tpGetLastError = _telplugins.tpGetLastError

def tpFreeText(text):
    return _telplugins.tpFreeText(text)
tpFreeText = _telplugins.tpFreeText

def tpRegisterHandle(handle, name):
    return _telplugins.tpRegisterHandle(handle, name)
tpRegisterHandle = _telplugins.tpRegisterHandle

def tpUnRegisterHandle(handle):
    return _telplugins.tpUnRegisterHandle(handle)
tpUnRegisterHandle = _telplugins.tpUnRegisterHandle
# This file is compatible with both classic and new-style classes.


